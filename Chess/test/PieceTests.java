import org.junit.Before;
import org.junit.Test;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

/**
 * A JUnit test class for the the Chess Pieces.
 */


public class PieceTests {
  public Knight knight1;
  public Knight knight2;
  public Knight knight3;
  public Knight knight4;
  public Knight knight5;
  public Knight knight6;
  public Knight knight7;
  public Knight knight8;
  public Knight knight9;
  public Knight knight10;

  public Bishop bishop1;
  public Bishop bishop2;
  public Bishop bishop3;
  public Bishop bishop4;
  public Bishop bishop5;
  public Bishop bishop6;
  public Bishop bishop7;
  public Bishop bishop8;
  public Bishop bishop9;
  public Bishop bishop10;

  public Rook rook1;
  public Rook rook2;
  public Rook rook3;
  public Rook rook4;
  public Rook rook5;
  public Rook rook6;
  public Rook rook7;
  public Rook rook8;
  public Rook rook9;
  public Rook rook10;

  public Queen queen1;
  public Queen queen2;
  public Queen queen3;
  public Queen queen4;
  public Queen queen5;
  public Queen queen6;
  public Queen queen7;
  public Queen queen8;
  public Queen queen9;
  public Queen queen10;
  public Queen queen11;
  public Queen queen13;

  public Pawn pawn1;
  public Pawn pawn2;
  public Pawn pawn3;
  public Pawn pawn4;
  public Pawn pawn5;
  public Pawn pawn6;
  public Pawn pawn7;
  public Pawn pawn8;
  public Pawn pawn9;
  public Pawn pawn10;
  public Pawn pawn11;
  public Pawn pawn12;


  /**
   * A JUnit test class for the exception from Pieces that can't be created.
   */

  @Test(expected = IllegalArgumentException.class)
  public void testIllegalArgumentException() {
    knight2 = new Knight(4, 10, Color.WHITE);
    queen11 = new Queen(8, 8, Color.BLACK);
    pawn11 = new Pawn(-4, 10, Color.WHITE);
    queen13 = new Queen(3, 2, null);
    pawn12 = new Pawn(3, 2, null);
  }

  /**
   * A JUnit test class to construct the pieces.
   */
  @Before
  public void setUp() {

    knight1 = new Knight(5, 0, Color.BLACK);
    knight2 = new Knight(5, 6, Color.WHITE);
    knight3 = new Knight(6, 4, Color.BLACK);
    knight4 = new Knight(4, 4, Color.WHITE);
    knight5 = new Knight(1, 5, Color.BLACK);
    knight6 = new Knight(6, 3, Color.BLACK);
    knight7 = new Knight(1, 1, Color.WHITE);
    knight8 = new Knight(7, 6, Color.WHITE);
    knight9 = new Knight(0, 4, Color.WHITE);
    knight10 = new Knight(1, 2, Color.WHITE);
    bishop1 = new Bishop(7, 1, Color.WHITE);
    bishop2 = new Bishop(3, 7, Color.BLACK);
    bishop3 = new Bishop(4, 3, Color.WHITE);
    bishop4 = new Bishop(2, 1, Color.WHITE);
    bishop5 = new Bishop(2, 1, Color.WHITE);
    bishop6 = new Bishop(2, 3, Color.BLACK);
    bishop7 = new Bishop(4, 1, Color.BLACK);
    bishop8 = new Bishop(1, 0, Color.WHITE);
    bishop9 = new Bishop(1, 5, Color.BLACK);
    bishop10 = new Bishop(6, 4, Color.BLACK);
    rook1 = new Rook(4, 6, Color.WHITE);
    rook2 = new Rook(1, 4, Color.WHITE);
    rook3 = new Rook(1, 7, Color.WHITE);
    rook4 = new Rook(0, 1, Color.BLACK);
    rook5 = new Rook(1, 0, Color.WHITE);
    rook6 = new Rook(0, 0, Color.WHITE);
    rook7 = new Rook(7, 2, Color.WHITE);
    rook8 = new Rook(0, 5, Color.BLACK);
    rook9 = new Rook(0, 0, Color.WHITE);
    rook10 = new Rook(2, 4, Color.WHITE);
    queen1 = new Queen(0, 1, Color.WHITE);
    queen2 = new Queen(7, 4, Color.BLACK);
    queen3 = new Queen(0, 7, Color.WHITE);
    queen4 = new Queen(2, 6, Color.BLACK);
    queen5 = new Queen(2, 7, Color.WHITE);
    queen6 = new Queen(1, 1, Color.BLACK);
    queen7 = new Queen(3, 0, Color.BLACK);
    queen8 = new Queen(0, 4, Color.WHITE);
    queen9 = new Queen(4, 3, Color.WHITE);
    queen10 = new Queen(3, 1, Color.BLACK);
    queen13 = new Queen(3, 5, Color.BLACK);
    pawn1 = new Pawn(3, 3, Color.BLACK);
    pawn2 = new Pawn(2, 6, Color.WHITE);
    pawn3 = new Pawn(2, 2, Color.BLACK);
    pawn4 = new Pawn(5, 3, Color.WHITE);
    pawn5 = new Pawn(4, 6, Color.WHITE);
    pawn6 = new Pawn(7, 1, Color.WHITE);
    pawn7 = new Pawn(6, 2, Color.WHITE);
    pawn8 = new Pawn(1, 4, Color.WHITE);
    pawn9 = new Pawn(7, 2, Color.BLACK);
    pawn10 = new Pawn(0, 5, Color.BLACK);

  }

  /**
   * A JUnit test class to test getting Pieces location.
   */
  @Test
  public void getPositionTest() {
    assertEquals("Row: 5 Column: 0", knight1.getPosition());
    assertEquals("Row: 1 Column: 1", queen6.getPosition());
    assertEquals("Row: 1 Column: 7", rook3.getPosition());
    assertEquals("Row: 0 Column: 5", pawn10.getPosition());
    assertEquals("Row: 3 Column: 7", bishop2.getPosition());
    assertEquals("Row: 3 Column: 1", queen10.getPosition());
    assertEquals("Row: 5 Column: 6", knight2.getPosition());
    assertEquals("Row: 4 Column: 1", bishop7.getPosition());
    assertEquals("Row: 2 Column: 4", rook10.getPosition());
  }


  /**
   * A JUnit test class to test if pieces can move to location.
   */

  @Test
  public void canMoveTest() {
    // True
    assertTrue(queen10.canMove(3, 4));
    assertTrue(knight3.canMove(5, 6));
    assertTrue(knight9.canMove(2, 5));
    assertTrue(bishop7.canMove(7, 4));
    assertTrue(bishop5.canMove(4, 3));
    assertTrue(bishop9.canMove(3, 3));
    assertTrue(bishop10.canMove(5, 5));
    assertTrue(rook8.canMove(6, 5));
    assertTrue(rook7.canMove(7, 3));
    assertTrue(rook7.canMove(7, 3));
    assertTrue(queen3.canMove(5, 7));
    assertTrue(queen5.canMove(5, 7));
    assertTrue(queen2.canMove(5, 2));
    assertTrue(queen1.canMove(4, 5));
    assertTrue(queen2.canMove(3, 4));

    // False

    //Move to spot already on
    assertFalse(knight2.canMove(knight2.getRow(), knight2.getColumn()));
    assertFalse(pawn1.canMove(pawn1.getRow(), pawn1.getColumn()));
    assertFalse(queen7.canMove(queen7.getRow(), queen7.getColumn()));
    assertFalse(bishop8.canMove(bishop8.getRow(), bishop8.getColumn()));
    assertFalse(rook5.canMove(rook5.getRow(), rook5.getColumn()));

    // Move OOB
    assertFalse(knight3.canMove(8, 8));
    assertFalse(knight4.canMove(-1, -2));

    // Randomly Generated Tests
    assertFalse(knight5.canMove(3, 10));
    assertFalse(knight6.canMove(6, 10));
    assertFalse(knight7.canMove(3, 9));
    assertFalse(knight8.canMove(5, 10));
    assertFalse(knight9.canMove(9, 7));
    assertFalse(knight10.canMove(3, 10));
    assertFalse(knight1.canMove(2, 2));
    assertFalse(knight2.canMove(8, 6));
    assertFalse(knight4.canMove(10, 4));
    assertFalse(knight5.canMove(3, 9));
    assertFalse(knight6.canMove(9, 5));
    assertFalse(knight7.canMove(4, 5));
    assertFalse(knight8.canMove(8, 6));
    assertFalse(knight9.canMove(9, 5));
    assertFalse(knight10.canMove(5, 3));
    assertFalse(knight1.canMove(10, 4));
    assertFalse(knight2.canMove(9, 2));
    assertFalse(knight3.canMove(9, 3));
    assertFalse(knight4.canMove(10, 9));
    assertFalse(knight5.canMove(5, 7));
    assertFalse(knight6.canMove(4, 10));
    assertFalse(knight7.canMove(10, 7));
    assertFalse(knight8.canMove(8, 4));
    assertFalse(knight9.canMove(10, 9));
    assertFalse(knight10.canMove(6, 6));
    assertFalse(knight1.canMove(8, 8));
    assertFalse(knight2.canMove(3, 3));
    assertFalse(knight3.canMove(10, 9));
    assertFalse(knight4.canMove(3, 9));
    assertFalse(knight5.canMove(3, 9));
    assertFalse(knight6.canMove(7, 8));
    assertFalse(knight7.canMove(7, 4));
    assertFalse(knight8.canMove(6, 9));
    assertFalse(knight10.canMove(5, 3));
    assertFalse(knight1.canMove(3, 8));
    assertFalse(knight2.canMove(5, 6));
    assertFalse(knight3.canMove(9, 9));
    assertFalse(knight4.canMove(3, 5));
    assertFalse(knight5.canMove(7, 10));
    assertFalse(knight6.canMove(9, 3));
    assertFalse(knight7.canMove(3, 4));
    assertFalse(knight8.canMove(8, 7));
    assertFalse(knight9.canMove(9, 3));
    assertFalse(knight10.canMove(9, 8));
    assertFalse(bishop1.canMove(10, 4));
    assertFalse(bishop2.canMove(8, 9));
    assertFalse(bishop3.canMove(8, 5));
    assertFalse(bishop4.canMove(3, 5));
    assertFalse(bishop5.canMove(4, 5));
    assertFalse(bishop6.canMove(7, 4));
    assertFalse(bishop8.canMove(6, 6));
    assertFalse(bishop9.canMove(8, 6));
    assertFalse(bishop10.canMove(4, 7));
    assertFalse(bishop1.canMove(6, 4));
    assertFalse(bishop2.canMove(2, 10));
    assertFalse(bishop3.canMove(7, 3));
    assertFalse(bishop4.canMove(8, 3));
    assertFalse(bishop5.canMove(10, 7));
    assertFalse(bishop6.canMove(10, 4));
    assertFalse(bishop7.canMove(2, 10));
    assertFalse(bishop8.canMove(3, 3));
    assertFalse(bishop9.canMove(4, 6));
    assertFalse(bishop10.canMove(7, 8));
    assertFalse(bishop1.canMove(2, 4));
    assertFalse(bishop2.canMove(7, 8));
    assertFalse(bishop3.canMove(3, 6));
    assertFalse(bishop4.canMove(7, 4));
    assertFalse(bishop5.canMove(7, 4));
    assertFalse(bishop6.canMove(2, 3));
    assertFalse(bishop7.canMove(3, 5));
    assertFalse(bishop8.canMove(7, 9));
    assertFalse(bishop9.canMove(3, 5));
    assertFalse(bishop10.canMove(6, 7));
    assertFalse(bishop1.canMove(10, 5));
    assertFalse(bishop2.canMove(10, 8));
    assertFalse(bishop3.canMove(3, 10));
    assertFalse(bishop4.canMove(9, 6));
    assertFalse(bishop6.canMove(7, 5));
    assertFalse(bishop7.canMove(5, 7));
    assertFalse(bishop8.canMove(8, 3));
    assertFalse(bishop9.canMove(10, 9));
    assertFalse(bishop10.canMove(4, 9));
    assertFalse(bishop1.canMove(4, 3));
    assertFalse(bishop2.canMove(10, 6));
    assertFalse(bishop3.canMove(8, 9));
    assertFalse(bishop4.canMove(4, 6));
    assertFalse(bishop5.canMove(9, 4));
    assertFalse(bishop6.canMove(7, 5));
    assertFalse(bishop7.canMove(6, 9));
    assertFalse(bishop8.canMove(9, 2));
    assertFalse(rook1.canMove(5, 7));
    assertFalse(rook2.canMove(5, 5));
    assertFalse(rook3.canMove(3, 9));
    assertFalse(rook4.canMove(8, 9));
    assertFalse(rook5.canMove(7, 10));
    assertFalse(rook6.canMove(8, 7));
    assertFalse(rook7.canMove(3, 4));
    assertFalse(rook9.canMove(3, 9));
    assertFalse(rook10.canMove(7, 6));
    assertFalse(rook1.canMove(5, 10));
    assertFalse(rook2.canMove(4, 5));
    assertFalse(rook3.canMove(9, 6));
    assertFalse(rook4.canMove(4, 5));
    assertFalse(rook5.canMove(4, 4));
    assertFalse(rook6.canMove(3, 10));
    assertFalse(rook8.canMove(5, 8));
    assertFalse(rook9.canMove(3, 3));
    assertFalse(rook10.canMove(10, 8));
    assertFalse(rook1.canMove(7, 5));
    assertFalse(rook2.canMove(8, 3));
    assertFalse(rook3.canMove(7, 2));
    assertFalse(rook4.canMove(10, 4));
    assertFalse(rook5.canMove(5, 4));
    assertFalse(rook6.canMove(2, 2));
    assertFalse(rook7.canMove(3, 7));
    assertFalse(rook8.canMove(10, 7));
    assertFalse(rook9.canMove(8, 4));
    assertFalse(rook10.canMove(6, 6));
    assertFalse(rook1.canMove(5, 5));
    assertFalse(rook2.canMove(10, 3));
    assertFalse(rook3.canMove(5, 6));
    assertFalse(rook4.canMove(7, 4));
    assertFalse(rook5.canMove(7, 7));
    assertFalse(rook6.canMove(5, 4));
    assertFalse(rook7.canMove(6, 10));
    assertFalse(rook8.canMove(3, 9));
    assertFalse(rook9.canMove(8, 5));
    assertFalse(rook10.canMove(10, 5));
    assertFalse(rook1.canMove(8, 10));
    assertFalse(rook2.canMove(5, 7));
    assertFalse(rook3.canMove(7, 5));
    assertFalse(rook4.canMove(2, 9));
    assertFalse(rook5.canMove(8, 6));
    assertFalse(rook6.canMove(7, 8));
    assertFalse(rook8.canMove(7, 7));
    assertFalse(rook9.canMove(8, 4));
    assertFalse(rook10.canMove(6, 5));
    assertFalse(queen1.canMove(8, 10));
    assertFalse(queen2.canMove(3, 2));
    assertFalse(queen3.canMove(4, 2));
    assertFalse(queen4.canMove(7, 7));
    assertFalse(queen5.canMove(9, 6));
    assertFalse(queen6.canMove(3, 7));
    assertFalse(queen7.canMove(10, 5));
    assertFalse(queen8.canMove(10, 2));
    assertFalse(queen9.canMove(5, 8));
    assertFalse(queen10.canMove(6, 6));
    assertFalse(queen1.canMove(9, 2));
    assertFalse(queen2.canMove(5, 8));
    assertFalse(queen4.canMove(10, 4));
    assertFalse(queen6.canMove(2, 8));
    assertFalse(queen7.canMove(5, 6));
    assertFalse(queen8.canMove(3, 2));
    assertFalse(queen9.canMove(10, 5));
    assertFalse(queen10.canMove(10, 9));
    assertFalse(queen1.canMove(9, 5));
    assertFalse(queen3.canMove(10, 3));
    assertFalse(queen4.canMove(3, 9));
    assertFalse(queen5.canMove(6, 9));
    assertFalse(queen6.canMove(5, 2));
    assertFalse(queen7.canMove(7, 9));
    assertFalse(queen8.canMove(7, 8));
    assertFalse(queen9.canMove(10, 5));
    assertFalse(queen10.canMove(5, 5));
    assertFalse(queen2.canMove(2, 7));
    assertFalse(queen3.canMove(6, 2));
    assertFalse(queen4.canMove(8, 10));
    assertFalse(queen5.canMove(3, 4));
    assertFalse(queen6.canMove(2, 5));
    assertFalse(queen7.canMove(10, 2));
    assertFalse(queen8.canMove(5, 9));
    assertFalse(queen9.canMove(2, 2));
    assertFalse(queen10.canMove(8, 2));
    assertFalse(queen1.canMove(6, 10));
    assertFalse(queen3.canMove(4, 2));
    assertFalse(queen4.canMove(8, 3));
    assertFalse(queen5.canMove(6, 10));
    assertFalse(queen6.canMove(10, 9));
    assertFalse(queen7.canMove(9, 2));
    assertFalse(queen8.canMove(7, 3));
    assertFalse(queen9.canMove(4, 9));
    assertFalse(pawn1.canMove(5, 5));
    assertFalse(pawn2.canMove(2, 5));
    assertFalse(pawn3.canMove(6, 4));
    assertFalse(pawn4.canMove(6, 4));
    assertFalse(pawn5.canMove(4, 7));
    assertFalse(pawn6.canMove(3, 8));
    assertFalse(pawn7.canMove(3, 5));
    assertFalse(pawn8.canMove(9, 4));
    assertFalse(pawn9.canMove(5, 9));
    assertFalse(pawn10.canMove(2, 4));
    assertFalse(pawn1.canMove(2, 5));
    assertFalse(pawn2.canMove(5, 8));
    assertFalse(pawn3.canMove(7, 3));
    assertFalse(pawn4.canMove(6, 9));
    assertFalse(pawn5.canMove(10, 7));
    assertFalse(pawn6.canMove(6, 8));
    assertFalse(pawn7.canMove(8, 7));
    assertFalse(pawn8.canMove(2, 7));
    assertFalse(pawn9.canMove(5, 10));
    assertFalse(pawn10.canMove(9, 8));
    assertFalse(pawn1.canMove(6, 2));
    assertFalse(pawn2.canMove(3, 2));
    assertFalse(pawn3.canMove(8, 5));
    assertFalse(pawn4.canMove(6, 5));
    assertFalse(pawn5.canMove(7, 8));
    assertFalse(pawn6.canMove(7, 6));
    assertFalse(pawn7.canMove(2, 8));
    assertFalse(pawn8.canMove(7, 7));
    assertFalse(pawn9.canMove(10, 7));
    assertFalse(pawn10.canMove(9, 8));
    assertFalse(pawn1.canMove(7, 7));
    assertFalse(pawn2.canMove(5, 10));
    assertFalse(pawn3.canMove(7, 9));
    assertFalse(pawn4.canMove(4, 3));
    assertFalse(pawn5.canMove(5, 5));
    assertFalse(pawn6.canMove(3, 4));
    assertFalse(pawn7.canMove(9, 5));
    assertFalse(pawn8.canMove(8, 2));
    assertFalse(pawn9.canMove(7, 6));
    assertFalse(pawn10.canMove(3, 6));
    assertFalse(pawn1.canMove(5, 6));
    assertFalse(pawn2.canMove(3, 9));
    assertFalse(pawn3.canMove(9, 4));
    assertFalse(pawn4.canMove(10, 5));
    assertFalse(pawn5.canMove(9, 8));
    assertFalse(pawn6.canMove(7, 2));
    assertFalse(pawn7.canMove(4, 6));
    assertFalse(pawn8.canMove(10, 4));
    assertFalse(pawn9.canMove(3, 5));
    assertFalse(pawn10.canMove(2, 7));
  }


  /**
   * A JUnit test class to test if Pieces can kill other pieces.
   */
  @Test
  public void canKillTest() {
    // True
    assertTrue(knight6.canKill(pawn6));
    assertTrue(knight4.canKill(bishop6));
    assertTrue(bishop4.canKill(queen7));
    assertTrue(bishop9.canKill(pawn2));
    assertTrue(rook5.canKill(queen7));
    assertTrue(rook8.canKill(knight9));
    assertTrue(queen1.canKill(queen6));
    assertTrue(queen6.canKill(rook2));
    assertTrue(queen7.canKill(bishop5));
    assertTrue(queen8.canKill(bishop2));
    assertTrue(queen10.canKill(bishop4));
    assertTrue(queen9.canKill(bishop7));
    assertTrue(queen10.canKill(knight9));
    assertTrue(queen6.canKill(rook2));
    assertTrue(queen7.canKill(rook6));
    assertTrue(queen5.canKill(pawn10));
    assertTrue(pawn2.canKill(queen13));

    // False
    assertFalse(knight3.canKill(bishop2));
    assertFalse(knight4.canKill(queen7));
    assertFalse(knight5.canKill(knight6));
    assertFalse(knight6.canKill(rook4));
    assertFalse(knight7.canKill(bishop8));
    assertFalse(knight8.canKill(pawn4));
    assertFalse(knight9.canKill(queen7));
    assertFalse(knight10.canKill(rook9));
    assertFalse(knight1.canKill(bishop7));
    assertFalse(knight2.canKill(rook8));
    assertFalse(knight3.canKill(pawn2));
    assertFalse(knight4.canKill(bishop8));
    assertFalse(knight5.canKill(knight8));
    assertFalse(knight6.canKill(bishop9));
    assertFalse(knight7.canKill(bishop7));
    assertFalse(knight8.canKill(rook3));
    assertFalse(knight9.canKill(queen2));
    assertFalse(knight10.canKill(knight2));
    assertFalse(knight1.canKill(bishop3));
    assertFalse(knight2.canKill(pawn3));
    assertFalse(knight3.canKill(pawn7));
    assertFalse(knight4.canKill(rook9));
    assertFalse(knight5.canKill(knight5));
    assertFalse(knight6.canKill(bishop5));
    assertFalse(knight7.canKill(knight4));
    assertFalse(knight8.canKill(rook10));
    assertFalse(knight9.canKill(queen3));
    assertFalse(knight10.canKill(queen3));
    assertFalse(knight1.canKill(queen3));
    assertFalse(knight2.canKill(rook4));
    assertFalse(knight3.canKill(rook8));
    assertFalse(knight4.canKill(bishop9));
    assertFalse(knight5.canKill(bishop7));
    assertFalse(knight6.canKill(rook4));
    assertFalse(knight7.canKill(queen4));
    assertFalse(knight8.canKill(knight7));
    assertFalse(knight9.canKill(rook4));
    assertFalse(knight10.canKill(knight9));
    assertFalse(knight1.canKill(queen4));
    assertFalse(knight2.canKill(rook7));
    assertFalse(knight3.canKill(bishop8));
    assertFalse(knight5.canKill(bishop4));
    assertFalse(knight7.canKill(knight6));
    assertFalse(knight8.canKill(pawn2));
    assertFalse(knight9.canKill(queen6));
    assertFalse(knight10.canKill(rook4));
    assertFalse(bishop1.canKill(pawn2));
    assertFalse(bishop2.canKill(bishop9));
    assertFalse(bishop3.canKill(bishop7));
    assertFalse(bishop4.canKill(pawn7));
    assertFalse(bishop5.canKill(pawn5));
    assertFalse(bishop6.canKill(rook4));
    assertFalse(bishop7.canKill(queen8));
    assertFalse(bishop8.canKill(pawn3));
    assertFalse(bishop9.canKill(bishop9));
    assertFalse(bishop10.canKill(pawn3));
    assertFalse(bishop1.canKill(knight7));
    assertFalse(bishop2.canKill(rook6));
    assertFalse(bishop3.canKill(queen6));
    assertFalse(bishop4.canKill(knight4));
    assertFalse(bishop5.canKill(bishop4));
    assertFalse(bishop6.canKill(bishop8));
    assertFalse(bishop7.canKill(bishop4));
    assertFalse(bishop8.canKill(queen7));
    assertFalse(bishop9.canKill(bishop7));
    assertFalse(bishop10.canKill(bishop7));
    assertFalse(bishop1.canKill(bishop6));
    assertFalse(bishop2.canKill(pawn7));
    assertFalse(bishop3.canKill(queen7));
    assertFalse(bishop5.canKill(bishop6));
    assertFalse(bishop6.canKill(bishop7));
    assertFalse(bishop7.canKill(knight6));
    assertFalse(bishop8.canKill(knight10));
    assertFalse(bishop9.canKill(rook3));
    assertFalse(bishop10.canKill(rook7));
    assertFalse(bishop1.canKill(rook9));
    assertFalse(bishop2.canKill(bishop9));
    assertFalse(bishop3.canKill(rook3));
    assertFalse(bishop4.canKill(queen8));
    assertFalse(bishop5.canKill(rook8));
    assertFalse(bishop6.canKill(pawn2));
    assertFalse(bishop7.canKill(queen6));
    assertFalse(bishop8.canKill(queen8));
    assertFalse(bishop10.canKill(rook7));
    assertFalse(bishop1.canKill(pawn9));
    assertFalse(bishop2.canKill(rook7));
    assertFalse(bishop3.canKill(pawn10));
    assertFalse(bishop4.canKill(queen8));
    assertFalse(bishop5.canKill(rook4));
    assertFalse(bishop6.canKill(bishop10));
    assertFalse(bishop7.canKill(bishop8));
    assertFalse(bishop8.canKill(knight7));
    assertFalse(bishop9.canKill(rook7));
    assertFalse(bishop10.canKill(knight9));
    assertFalse(rook1.canKill(pawn2));
    assertFalse(rook2.canKill(pawn10));
    assertFalse(rook3.canKill(queen3));
    assertFalse(rook4.canKill(rook10));
    assertFalse(rook6.canKill(pawn7));
    assertFalse(rook7.canKill(rook2));
    assertFalse(rook8.canKill(bishop9));
    assertFalse(rook9.canKill(knight5));
    assertFalse(rook10.canKill(rook9));
    assertFalse(rook1.canKill(knight8));
    assertFalse(rook2.canKill(rook7));
    assertFalse(rook3.canKill(queen4));
    assertFalse(rook4.canKill(knight5));
    assertFalse(rook5.canKill(pawn8));
    assertFalse(rook6.canKill(knight10));
    assertFalse(rook7.canKill(queen8));
    assertFalse(rook9.canKill(pawn7));
    assertFalse(rook10.canKill(pawn8));
    assertFalse(rook1.canKill(rook4));
    assertFalse(rook2.canKill(knight6));
    assertFalse(rook3.canKill(knight2));
    assertFalse(rook4.canKill(bishop9));
    assertFalse(rook5.canKill(bishop6));
    assertFalse(rook6.canKill(queen6));
    assertFalse(rook7.canKill(pawn9));
    assertFalse(rook8.canKill(pawn10));
    assertFalse(rook9.canKill(pawn4));
    assertFalse(rook10.canKill(bishop8));
    assertFalse(rook1.canKill(rook2));
    assertFalse(rook2.canKill(rook10));
    assertFalse(rook3.canKill(pawn6));
    assertFalse(rook4.canKill(queen2));
    assertFalse(rook5.canKill(queen5));
    assertFalse(rook6.canKill(bishop5));
    assertFalse(rook7.canKill(bishop5));
    assertFalse(rook8.canKill(rook2));
    assertFalse(rook9.canKill(bishop8));
    assertFalse(rook10.canKill(knight10));
    assertFalse(rook1.canKill(bishop5));
    assertFalse(rook2.canKill(pawn4));
    assertFalse(rook3.canKill(rook4));
    assertFalse(rook4.canKill(knight8));
    assertFalse(rook5.canKill(rook7));
    assertFalse(rook6.canKill(pawn6));
    assertFalse(rook7.canKill(knight2));
    assertFalse(rook8.canKill(rook8));
    assertFalse(rook9.canKill(rook7));
    assertFalse(rook10.canKill(queen10));
    assertFalse(queen2.canKill(bishop4));
    assertFalse(queen3.canKill(rook7));
    assertFalse(queen4.canKill(pawn2));
    assertFalse(queen5.canKill(knight8));
    assertFalse(queen8.canKill(rook10));
    assertFalse(queen9.canKill(rook6));
    assertFalse(queen1.canKill(knight8));
    assertFalse(queen2.canKill(bishop7));
    assertFalse(queen3.canKill(knight5));
    assertFalse(queen4.canKill(rook5));
    assertFalse(queen5.canKill(knight2));
    assertFalse(queen6.canKill(knight5));
    assertFalse(queen7.canKill(bishop2));
    assertFalse(queen9.canKill(pawn4));
    assertFalse(queen10.canKill(knight4));
    assertFalse(queen1.canKill(rook2));
    assertFalse(queen2.canKill(queen3));
    assertFalse(queen3.canKill(pawn2));
    assertFalse(queen4.canKill(knight7));
    assertFalse(queen5.canKill(rook2));
    assertFalse(queen6.canKill(pawn2));
    assertFalse(queen7.canKill(knight9));
    assertFalse(queen8.canKill(bishop8));
    assertFalse(queen9.canKill(rook9));
    assertFalse(queen10.canKill(knight3));
    assertFalse(queen1.canKill(knight7));
    assertFalse(queen2.canKill(rook9));
    assertFalse(queen3.canKill(knight8));
    assertFalse(queen4.canKill(pawn2));
    assertFalse(queen6.canKill(rook8));
    assertFalse(queen8.canKill(bishop6));
    assertFalse(queen9.canKill(queen7));
    assertFalse(queen10.canKill(knight4));
    assertFalse(queen1.canKill(bishop9));
    assertFalse(queen2.canKill(bishop8));
    assertFalse(queen3.canKill(knight3));
    assertFalse(queen4.canKill(rook5));
    assertFalse(queen5.canKill(queen2));
    assertFalse(queen7.canKill(knight9));
    assertFalse(queen8.canKill(rook3));
    assertFalse(pawn1.canKill(queen9));
    assertFalse(pawn2.canKill(bishop7));
    assertFalse(pawn3.canKill(pawn7));
    assertFalse(pawn4.canKill(pawn2));
    assertFalse(pawn5.canKill(pawn5));
    assertFalse(pawn6.canKill(knight10));
    assertFalse(pawn7.canKill(rook3));
    assertFalse(pawn8.canKill(pawn8));
    assertFalse(pawn9.canKill(rook5));
    assertFalse(pawn10.canKill(pawn6));
    assertFalse(pawn1.canKill(pawn6));
    assertFalse(pawn2.canKill(pawn10));
    assertFalse(pawn3.canKill(queen8));
    assertFalse(pawn4.canKill(queen2));
    assertFalse(pawn5.canKill(knight9));
    assertFalse(pawn6.canKill(queen4));
    assertFalse(pawn7.canKill(pawn6));
    assertFalse(pawn8.canKill(pawn2));
    assertFalse(pawn9.canKill(knight10));
    assertFalse(pawn10.canKill(knight7));
    assertFalse(pawn1.canKill(rook9));
    assertFalse(pawn2.canKill(pawn2));
    assertFalse(pawn3.canKill(rook2));
    assertFalse(pawn4.canKill(queen9));
    assertFalse(pawn5.canKill(bishop3));
    assertFalse(pawn6.canKill(bishop4));
    assertFalse(pawn7.canKill(rook6));
    assertFalse(pawn8.canKill(knight6));
    assertFalse(pawn9.canKill(queen7));
    assertFalse(pawn10.canKill(pawn2));
    assertFalse(pawn1.canKill(rook3));
    assertFalse(pawn2.canKill(bishop5));
    assertFalse(pawn3.canKill(knight2));
    assertFalse(pawn4.canKill(knight6));
    assertFalse(pawn5.canKill(rook5));
    assertFalse(pawn6.canKill(knight5));
    assertFalse(pawn7.canKill(bishop3));
    assertFalse(pawn8.canKill(knight8));
    assertFalse(pawn9.canKill(pawn7));
    assertFalse(pawn10.canKill(bishop2));
    assertFalse(pawn1.canKill(knight4));
    assertFalse(pawn2.canKill(pawn2));
    assertFalse(pawn3.canKill(knight9));
    assertFalse(pawn4.canKill(rook6));
    assertFalse(pawn5.canKill(rook5));
    assertFalse(pawn6.canKill(rook4));
    assertFalse(pawn7.canKill(pawn10));
    assertFalse(pawn8.canKill(knight8));
    assertFalse(pawn9.canKill(pawn6));
    assertFalse(pawn10.canKill(bishop9));
  }
}